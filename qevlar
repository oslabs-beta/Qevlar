#!/usr/bin/env node

const { redBold, bold, darkBold, yellowBold } = require('./color.js');
const readline = require('readline');
const qevlarLogo = `

 ██████  ███████ ██    ██ ██       █████  ██████
██    ██ ██      ██    ██ ██      ██   ██ ██   ██
██    ██ █████   ██    ██ ██      ███████ ██████
██ ▄▄ ██ ██       ██  ██  ██      ██   ██ ██   ██
 ██████  ███████   ████   ███████ ██   ██ ██   ██
    ▀▀
`;

const maliciousInjectionTest = require('./src/tests/maliciousInjectionTests.js');
const fieldDuplicationTest = require('./src/tests/fieldDuplicationTest.js');
const depthLimitTest = require('./src/tests/depthLimitTests.js');
const adaptiveRateLimitingTest = require('./src/tests/adaptiveRateLimitingTest.js');
const rateLimitTest = require('./src/tests/rateLimitTest.js');
const batchTest = require('./src/tests/queryBatchTest.js');
console.log('batchTest', batchTest);
const getSchema = require('./src/getSchema.js');

const tests = {
  0: {
    name: 'Generate Config',
    function: generateConfig,
  },
  1: {
    name: 'Rate Limit Test',
    function: rateLimitTest,
  },
  2: {
    name: 'Adaptive Rate Limiting Test',
    function: adaptiveRateLimitingTest,
  },
  3: {
    name: 'Fixed Depth Test',
    function: depthLimitTest.max,
  },
  4: {
    name: 'Incremental Depth Test',
    function: depthLimitTest.incremental,
  },
  5: {
    name: 'Field Duplication Test',
    function: fieldDuplicationTest,
  },
  6: {
    name: 'Query Batch Test',
    function: batchTest,
  },
  7: {
    name: 'SQL Malicious Injection Test',
    function: maliciousInjectionTest.SQL,
  },
  8: {
    name: 'NoSQL Malicious Injection Test',
    function: maliciousInjectionTest.NoSQL,
  },
  9: {
    name: 'Cross-Site Scripting Injection Test',
    function: maliciousInjectionTest.XSS,
  },
  10: {
    name: 'OS Command Injection Test',
    function: maliciousInjectionTest.OS,
  },
};

// To return to test menu after test completion
function runTest(testKey, rl) {
  console.log(`\nRunning ${tests[testKey].name}...\n`);
  console.log('test', tests[testKey]);
  tests[testKey].function(() => {
    console.log('Choose another test or press Q to exit.');
    rl.close();
    listTestsAndRunSelection();
  });
}

function listTestsAndRunSelection() {
  console.log(
    bold(
      '\n\n><><><><><>< ' +
        bold('W E L C O M E  T O  Q E V L A R') +
        ' ><><><><><><\n'
    )
  );
  console.log(yellowBold('\nAvailable Tests:'));
  console.log(darkBold('═══════════════════════════════'));
  for (const test in tests) {
    console.log(`${test} : ${tests[test].name}`);
  }
  console.log('Q: Exit qevlar testing library');
  console.log(darkBold('═══════════════════════════════'));

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false,
  });

  rl.question(
    '\nEnter the number of the test to run or Q to quit: \n',
    (input) => {
      const testKey = input.trim().toUpperCase();
      if (testKey === 'Q') {
        console.log(redBold('\nThank you for using'));
        console.log(`${qevlarLogo}`);
        console.log(redBold('\nExiting...'));
        rl.close();
      } else if (tests[testKey]) {
        runTest(testKey, rl);
      } else {
        console.log('Invalid selection.');
        rl.close();
        listTestsAndRunSelection();
      }
    }
  );
}

// To auto-generate qevlarConfig.json
async function generateConfig() {
  return new Promise((resolve, reject) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false,
    });
    rl.question('\nPlease submit the url to your API:\n', async (apiUrl) => {
      try {
        const result = await getSchema(apiUrl, listTestsAndRunSelection);
        if (result === 'success') {
          resolve();
          rl.close();
        }
      } catch (error) {
        console.log('error in getSchema', error);
        rl.close();
        reject(error);
      }
    });
  });
}

listTestsAndRunSelection();
